akka {
  loglevel = DEBUG

  actor {
    provider = cluster

    serialization-bindings {
      "CborSerializable" = jackson-cbor
    }
  }

  remote.artery {
    canonical.port = 2551
    canonical.port = ${?CANONICAL_PORT}
    canonical.port = ${?canonical.port}
    canonical.hostname = 127.0.0.1
    canonical.hostname = ${?CANONICAL_HOST_NAME}
    canonical.hostname = ${?canonical.hostname}
  }

  cluster {
    seed-nodes = [
      "akka://MessageProcessorSystem@127.0.0.1:2551"
    ]

    sharding {
          number-of-shards = 100
    }
  }

  persistence {
      journal.plugin = "akka.persistence.cassandra.journal"
      snapshot-store.plugin = "akka.persistence.cassandra.snapshot"
    }
}

akka.cluster.downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"

akka.cluster.split-brain-resolver {
  active-strategy = keep-majority
  stable-after = 20s
  down-all-when-unstable = on
}

# Configuration for akka-persistence-cassandra
akka.persistence.cassandra {
  events-by-tag {
    bucket-size = "Day"
    # for reduced latency
    eventual-consistency-delay = 200ms
    flush-interval = 50ms
    pubsub-notification = on
    first-time-bucket = "20200115T00:00"
  }

  query {
    refresh-interval = 2s
  }

  # don't use autocreate in production
  journal.keyspace-autocreate = on
  journal.tables-autocreate = on
  snapshot.keyspace-autocreate = on
  snapshot.tables-autocreate = on
}

datastax-java-driver {
  advanced.reconnect-on-init = on
}

akka.projection.cassandra.offset-store.keyspace = "akka_cqrs_sample"

event-processor {
  tag-prefix = "carts-slice"       // even processor tag prefix
  parallelism = 4                  // number of event processors
}

server.http.port = 8081
server.http.port = ${?HTTP_PORT}
server.http.port = ${?http.port}
server.askTimeout = 10 s

nats{
    url = "nats://localhost:4222
    client.id = "teste"
    cluster.id = "nats-cluster"
}

