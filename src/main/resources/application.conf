akka {
  loglevel = DEBUG

  actor {
    provider = cluster

    serialization-bindings {
      "br.com.diego.processor.CborSerializable" = jackson-cbor
    }

    typed.extensions = ["br.com.diego.processor.nats.NatsConnectionExtension"]
  }

  remote.artery {
    canonical.port = 2551
    canonical.port = ${?CANONICAL_PORT}
    canonical.port = ${?canonical.port}
    canonical.hostname = 127.0.0.1
    canonical.hostname = ${?CANONICAL_HOST_NAME}
    canonical.hostname = ${?canonical.hostname}
  }

  cluster {
  
    sharding {
          number-of-shards = 100
    }

    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"

    split-brain-resolver {
      active-strategy = keep-majority
      stable-after = 20s
      down-all-when-unstable = on
    }
  }

   persistence {
     journal.plugin = "jdbc-journal"
     snapshot-store.plugin = "jdbc-snapshot-store"
   }
}

server.http.port = 8081
server.http.port = ${?HTTP_PORT}
server.http.port = ${?http.port}
server.askTimeout = 10 s

nats{
    url = "nats://127.0.0.1:4222"
    url = ${?NATS_URL}
    client.id = "teste"
    client.id = ${?NATS_CLIENT_ID}
    cluster.id = "test-cluster"
    cluster.id = ${?NATS_CLUSTER_ID}
}

akka-persistence-jdbc {
  logicalDeletion.enable = true
  tagSeparator = ","
  database-provider-fqcn = "akka.persistence.jdbc.db.DefaultSlickDatabaseProvider"
  shared-databases {
    slick {
      profile = "slick.jdbc.PostgresProfile$"
      db {
        connectionPool = "HikariCP"
        url = "jdbc:postgresql://localhost:5432/postgres"
        url = ${?POSTGRES_URL}
        user = "postgres"
        user = ${?POSTGRES_USER}
        password = "postgres"
        password = ${?POSTGRES_PASSWORD}
        driver = "org.postgresql.Driver"
        queueSize = 10000 // number of objects that can be queued by the async exector
        connectionTimeout = 180000
        validationTimeout = 5000
        idleTimeout = 600000
        maxLifetime = 1800000
        leakDetectionThreshold = 0
        keepAliveConnection = on
        numThreads = 20
        maxConnections = 20
        minConnections = 20
      }
    }
  }
}

jdbc-journal {
  class = "akka.persistence.jdbc.journal.JdbcAsyncWriteJournal"
  tables {
    journal {
      tableName = "journal"
      schemaName = ""
      columnNames {
        ordering = "ordering"
        deleted = "deleted"
        persistenceId = "persistence_id"
        sequenceNumber = "sequence_number"
        created = "created"
        tags = "tags"
        message = "message"
      }
    }
  }
  tagSeparator = ${akka-persistence-jdbc.tagSeparator}
  dao = "akka.persistence.jdbc.journal.dao.ByteArrayJournalDao"
  bufferSize = 1000
  batchSize = 400
  replayBatchSize = 400
  parallelism = 8
  logicalDelete = ${akka-persistence-jdbc.logicalDeletion.enable}
  use-shared-db = "slick"
}

jdbc-snapshot-store {
  class = "akka.persistence.jdbc.snapshot.JdbcSnapshotStore"
  tables {
    snapshot {
      tableName = "snapshot"
      schemaName = ""
      columnNames {
        persistenceId = "persistence_id"
        sequenceNumber = "sequence_number"
        created = "created"
        snapshot = "snapshot"
      }
    }
  }
  use-shared-db = "slick"
  dao = "akka.persistence.jdbc.snapshot.dao.ByteArraySnapshotDao"
}

jdbc-read-journal {
  class = "akka.persistence.jdbc.query.JdbcReadJournalProvider"
  write-plugin = "jdbc-journal"
  refresh-interval = "1s"
  max-buffer-size = "500"
  add-shutdown-hook = true
  use-shared-db = "slick"
  dao = "akka.persistence.jdbc.query.dao.ByteArrayReadJournalDao"
  includeLogicallyDeleted = ${akka-persistence-jdbc.logicalDeletion.enable}
  journal-sequence-retrieval {
    batch-size = 10000
    max-tries = 10
    query-delay = 1 second
    max-backoff-query-delay = 1 minute
    ask-timeout = 1 second
  }

  tables {
    journal {
      tableName = "journal"
      schemaName = ""
      columnNames {
        ordering = "ordering"
        persistenceId = "persistence_id"
        sequenceNumber = "sequence_number"
        created = "created"
        tags = "tags"
        message = "message"
      }
    }
  }
  tagSeparator = ${akka-persistence-jdbc.tagSeparator}
}