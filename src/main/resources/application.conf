akka {
  loglevel = DEBUG

  actor {
    provider = cluster

    serialization-bindings {
      "br.com.diego.processor.CborSerializable" = jackson-cbor
    }

    typed.extensions = ["br.com.diego.processor.nats.NatsConnectionExtension", "br.com.diego.processor.nats.CassandraSessionExtension"]
  }

  remote.artery {
    canonical.port = 2551
    canonical.port = ${?CANONICAL_PORT}
    canonical.port = ${?canonical.port}
    canonical.hostname = 127.0.0.1
    canonical.hostname = ${?CANONICAL_HOST_NAME}
    canonical.hostname = ${?canonical.hostname}
  }

  cluster {
    seed-nodes = [
      "akka://NatsMessageSystem@127.0.0.1:2551"
    ]

    sharding {
          number-of-shards = 100
    }

    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"

    split-brain-resolver {
      active-strategy = keep-majority
      stable-after = 20s
      down-all-when-unstable = on
    }
  }

   persistence {
     journal.plugin = "akka.persistence.cassandra.journal"
     snapshot-store.plugin = "akka.persistence.cassandra.snapshot"
   }
}

server.http.port = 8081
server.http.port = ${?HTTP_PORT}
server.http.port = ${?http.port}
server.askTimeout = 10 s

nats{
    url = "nats://127.0.0.1:4222"
    client.id = "teste"
    cluster.id = "test-cluster"
}

akka.persistence.cassandra {
  session-provider = "akka.stream.alpakka.cassandra.DefaultSessionProvider"
  service-discovery {
    name = ""
    lookup-timeout = 1 s
  }
  session-dispatcher = "akka.persistence.cassandra.default-dispatcher"
  datastax-java-driver-config = "datastax-java-driver"
  read-profile = "akka-persistence-cassandra-profile"
  write-profile = "akka-persistence-cassandra-profile"
  meta-in-events-by-tag-view = on
  coordinated-shutdown-on-error = off

  compatibility {
    cosmosdb = off
  }

  journal {
    class = "akka.persistence.cassandra.journal.CassandraJournal"
    plugin-dispatcher = "akka.persistence.cassandra.default-dispatcher"
    keyspace-autocreate = true
    tables-autocreate = true
    keyspace = "akka_nats_message_processor"
    table = "messages"
    table-compaction-strategy {
      class = "SizeTieredCompactionStrategy"
    }
    metadata-table = "metadata"
    all-persistence-ids-table = "all_persistence_ids"
    replication-strategy = "SimpleStrategy"
    replication-factor = 1
    data-center-replication-factors = []
    max-message-batch-size = 100
    target-partition-size = 500000
    gc-grace-seconds = 864000
    max-concurrent-deletes = 10
    support-deletes = on
    support-all-persistence-ids = on
  }

  query {
    class = "akka.persistence.cassandra.query.CassandraReadJournalProvider"
    plugin-dispatcher = "akka.persistence.cassandra.default-dispatcher"
    read-profile = "akka-persistence-cassandra-profile"
    refresh-interval = 3s
    gap-free-sequence-numbers = on
    events-by-persistence-id-gap-timeout = 10s
    max-buffer-size = 500
    deserialization-parallelism = 1
  }

  events-by-tag {
    enabled = false
    max-message-batch-size = 150
    flush-interval = 0ms
    tag-write-timeout = 4s
    scanning-flush-interval = 30s
    pubsub-notification = off

    table = "tag_views"
    gc-grace-seconds = 864000

    compaction-strategy {
      class = "SizeTieredCompactionStrategy"
    }
    bucket-size = "Hour"
    first-time-bucket = "20151120T00:00"
    stop-tag-writer-when-idle = 10s
    gap-timeout = 10s
    new-persistence-id-scan-timeout = 100ms
    offset-scanning-period = 200ms
    retries {
      attempts = 100
      min-backoff = 1s
      max-backoff = 30s
      random-factor = 0.1
    }

    back-track {
      interval = 1s
      period = 5s
      long-interval = 120s
      long-period = "max"
    }
    eventual-consistency-delay = 5s
    verbose-debug-logging = false
    cleanup-old-persistence-ids = "<default>"
    max-missing-to-search = 5000
  }

  snapshot {
    class = "akka.persistence.cassandra.snapshot.CassandraSnapshotStore"
    plugin-dispatcher = "akka.persistence.cassandra.default-dispatcher"
    write-profile = "akka-persistence-cassandra-snapshot-profile"
    read-profile = "akka-persistence-cassandra-snapshot-profile"
    keyspace-autocreate = true
    tables-autocreate = true
    keyspace = "akka_snapshot_nats_message_processor"
    table = "snapshots"

    table-compaction-strategy {
      class = "SizeTieredCompactionStrategy"
    }

    replication-strategy = "SimpleStrategy"
    replication-factor = 1
    data-center-replication-factors = []
    gc-grace-seconds = 864000
    max-load-attempts = 3
  }

  cleanup {
    plugin-location = "akka.persistence.cassandra"
    operation-timeout = 10s
    log-progress-every = 100
    dry-run = true
  }

  reconciler {
    plugin-location = "akka.persistence.cassandra"
    read-profile = "akka-persistence-cassandra-profile"
    write-profile = "akka-persistence-cassandra-profile"
  }

  healthcheck {
    plugin-location = "akka.persistence.cassandra"
    timeout = 500ms
    health-check-cql = "SELECT now() FROM system.local"
  }

  default-dispatcher {
    type = Dispatcher
    executor = "fork-join-executor"
    fork-join-executor {
      parallelism-min = 6
      parallelism-factor = 1
      parallelism-max = 6
    }
  }

}

datastax-java-driver {
  advanced.reconnect-on-init = true
  profiles {

    akka-persistence-cassandra-profile {
      basic.request {
        consistency = QUORUM
        default-idempotence = true
      }
    }

    akka-persistence-cassandra-snapshot-profile {
      basic.request {
        consistency = ONE
        default-idempotence = true
      }
    }

  }
}